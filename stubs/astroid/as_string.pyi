# Stubs for astroid.as_string (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

DOC_NEWLINE: str

class AsStringVisitor:
    indent: Any = ...
    def __init__(self, indent: Any) -> None: ...
    def __call__(self, node: Any): ...
    def visit_arguments(self, node: Any): ...
    def visit_assignattr(self, node: Any): ...
    def visit_assert(self, node: Any): ...
    def visit_assignname(self, node: Any): ...
    def visit_assign(self, node: Any): ...
    def visit_augassign(self, node: Any): ...
    def visit_annassign(self, node: Any): ...
    def visit_repr(self, node: Any): ...
    def visit_binop(self, node: Any): ...
    def visit_boolop(self, node: Any): ...
    def visit_break(self, node: Any): ...
    def visit_call(self, node: Any): ...
    def visit_classdef(self, node: Any): ...
    def visit_compare(self, node: Any): ...
    def visit_comprehension(self, node: Any): ...
    def visit_const(self, node: Any): ...
    def visit_continue(self, node: Any): ...
    def visit_delete(self, node: Any): ...
    def visit_delattr(self, node: Any): ...
    def visit_delname(self, node: Any): ...
    def visit_decorators(self, node: Any): ...
    def visit_dict(self, node: Any): ...
    def visit_dictunpack(self, node: Any): ...
    def visit_dictcomp(self, node: Any): ...
    def visit_expr(self, node: Any): ...
    def visit_emptynode(self, node: Any): ...
    def visit_excepthandler(self, node: Any): ...
    def visit_ellipsis(self, node: Any): ...
    def visit_empty(self, node: Any): ...
    def visit_exec(self, node: Any): ...
    def visit_extslice(self, node: Any): ...
    def visit_for(self, node: Any): ...
    def visit_importfrom(self, node: Any): ...
    def visit_functiondef(self, node: Any): ...
    def visit_generatorexp(self, node: Any): ...
    def visit_attribute(self, node: Any): ...
    def visit_global(self, node: Any): ...
    def visit_if(self, node: Any): ...
    def visit_ifexp(self, node: Any): ...
    def visit_import(self, node: Any): ...
    def visit_keyword(self, node: Any): ...
    def visit_lambda(self, node: Any): ...
    def visit_list(self, node: Any): ...
    def visit_listcomp(self, node: Any): ...
    def visit_module(self, node: Any): ...
    def visit_name(self, node: Any): ...
    def visit_pass(self, node: Any): ...
    def visit_print(self, node: Any): ...
    def visit_raise(self, node: Any): ...
    def visit_return(self, node: Any): ...
    def visit_index(self, node: Any): ...
    def visit_set(self, node: Any): ...
    def visit_setcomp(self, node: Any): ...
    def visit_slice(self, node: Any): ...
    def visit_subscript(self, node: Any): ...
    def visit_tryexcept(self, node: Any): ...
    def visit_tryfinally(self, node: Any): ...
    def visit_tuple(self, node: Any): ...
    def visit_unaryop(self, node: Any): ...
    def visit_while(self, node: Any): ...
    def visit_with(self, node: Any): ...
    def visit_yield(self, node: Any): ...
    def visit_starred(self, node: Any): ...
    def visit_frozenset(self, node: Any): ...
    def visit_super(self, node: Any): ...
    def visit_uninferable(self, node: Any): ...

class AsStringVisitor3(AsStringVisitor):
    def visit_excepthandler(self, node: Any): ...
    def visit_nonlocal(self, node: Any): ...
    def visit_raise(self, node: Any): ...
    def visit_yieldfrom(self, node: Any): ...
    def visit_asyncfunctiondef(self, node: Any): ...
    def visit_await(self, node: Any): ...
    def visit_asyncwith(self, node: Any): ...
    def visit_asyncfor(self, node: Any): ...
    def visit_joinedstr(self, node: Any): ...
    def visit_formattedvalue(self, node: Any): ...
    def visit_comprehension(self, node: Any): ...
AsStringVisitor = AsStringVisitor3
to_code: Any
