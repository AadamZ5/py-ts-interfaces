# Stubs for astroid.objects (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from astroid import bases, node_classes, scoped_nodes
from typing import Any, Optional

BUILTINS: Any
objectmodel: Any

class FrozenSet(node_classes._BaseContainer):
    def pytype(self): ...

class Super(node_classes.NodeNG):
    special_attributes: Any = ...
    type: Any = ...
    mro_pointer: Any = ...
    def __init__(self, mro_pointer: Any, mro_type: Any, self_class: Any, scope: Any) -> None: ...
    def super_mro(self): ...
    def pytype(self): ...
    def display_type(self): ...
    @property
    def name(self): ...
    def qname(self): ...
    def igetattr(self, name: Any, context: Optional[Any] = ...) -> None: ...
    def getattr(self, name: Any, context: Optional[Any] = ...): ...

class ExceptionInstance(bases.Instance):
    def special_attributes(self): ...

class DictInstance(bases.Instance):
    special_attributes: Any = ...

class DictItems(bases.Proxy): ...
class DictKeys(bases.Proxy): ...
class DictValues(bases.Proxy): ...

class PartialFunction(scoped_nodes.FunctionDef):
    filled_positionals: Any = ...
    filled_args: Any = ...
    filled_keywords: Any = ...
    def __init__(self, call: Any, name: Optional[Any] = ..., doc: Optional[Any] = ..., lineno: Optional[Any] = ..., col_offset: Optional[Any] = ..., parent: Optional[Any] = ...) -> None: ...
    def infer_call_result(self, caller: Optional[Any] = ..., context: Optional[Any] = ...): ...
    def qname(self): ...
