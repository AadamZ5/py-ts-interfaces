# Stubs for astroid.bases (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

objectmodel: Any
helpers: Any
BUILTINS: Any
manager: Any
MANAGER: Any
BOOL_SPECIAL_METHOD: str
PROPERTIES: Any
POSSIBLE_PROPERTIES: Any

class Proxy:
    def __init__(self, proxied: Optional[Any] = ...) -> None: ...
    def __getattr__(self, name: Any) -> Any: ...
    def infer(self, context: Optional[Any] = ...) -> None: ...

class BaseInstance(Proxy):
    special_attributes: Any = ...
    def display_type(self) -> Any: ...
    def getattr(self, name: Any, context: Optional[Any] = ..., lookupclass: bool = ...) -> Any: ...
    def igetattr(self, name: Any, context: Optional[Any] = ...) -> None: ...
    def infer_call_result(self, caller: Any, context: Optional[Any] = ...) -> None: ...

class Instance(BaseInstance):
    special_attributes: Any = ...
    def callable(self) -> Any: ...
    def pytype(self) -> Any: ...
    def display_type(self) -> Any: ...
    def bool_value(self) -> Any: ...
    def getitem(self, index: Any, context: Optional[Any] = ...) -> None: ...

class UnboundMethod(Proxy):
    special_attributes: Any = ...
    def implicit_parameters(self) -> Any: ...
    def is_bound(self) -> Any: ...
    def getattr(self, name: Any, context: Optional[Any] = ...) -> Any: ...
    def igetattr(self, name: Any, context: Optional[Any] = ...) -> Any: ...
    def infer_call_result(self, caller: Any, context: Any) -> Any: ...
    def bool_value(self) -> Any: ...

class BoundMethod(UnboundMethod):
    special_attributes: Any = ...
    bound: Any = ...
    def __init__(self, proxy: Any, bound: Any) -> None: ...
    def implicit_parameters(self) -> Any: ...
    def is_bound(self) -> Any: ...
    def infer_call_result(self, caller: Any, context: Optional[Any] = ...) -> Any: ...
    def bool_value(self) -> Any: ...

class Generator(BaseInstance):
    special_attributes: Any = ...
    parent: Any = ...
    def __init__(self, parent: Optional[Any] = ...) -> None: ...
    def callable(self) -> Any: ...
    def pytype(self) -> Any: ...
    def display_type(self) -> Any: ...
    def bool_value(self) -> Any: ...

class AsyncGenerator(Generator):
    def pytype(self) -> Any: ...
    def display_type(self) -> Any: ...
